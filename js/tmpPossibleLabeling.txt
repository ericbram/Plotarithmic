
@ Eric increment finder: (written ~ 1987)

/*******************************************************************
*
*      FINDINC(limits,&increment)
*
*      INPUT:  limits          - double array [0] = Minimum
*                                             [1] = Maximum
*
*      OUTPUT: # Increments
*              increment       - Increment used
*
********************************************************************/

findinc(double *limits,double *increment)
{
       double value,power,length;
       double ceil();
       int count;

/*------------------------------------------------------------------

       OPERATION:

       1) Compute distance between min and max
       2) Use norm to get mantissa and 10's
       3) Determine increment
       4) Multiply by power of ten and return

-------------------------------------------------------------------*/

       /*  Get the total length of the axis then divide by 8
           as we will assume 8 divisions for the momemt
       */

       length = (limits[1] - limits[0]) / 8.0;

       norm(length,&value,&power);

       /*  Look at the returned value, if > 5 make = 8
                                       if < 5 but > 2 make 5
                                       if < 2 > 1 make 2
                                       if = 1 leave alone
       */

       if( value > 5.0 )
               value = 8.0;
       else
               if( value > 2.0 )
                       value = 5.0;
               else
                       if( value > 1.0 )
                               value = 2.0;
                       else
                               value = 1.0;

       /*  Multiply by the power of ten to get the
           increment
       */

       *increment = value * power;

       /*  Calculate how many by dividing the new increment back into
           the original if = 0 divide increment by 10 and try again
       */

       value =  (10.0 * length) / *increment;
       count = (int) value;
       if( count == 0 )
       {
               *increment = *increment / 10.0;
               value = (10.0 * length) / *increment;
               count = (int) value;
       }

       count = count+ 1;

       return( count );

}